#!/usr/bin/env python
import argparse

from botocore.session import get_session
from s3transfer.manager import TransferManager


class NonSeekableWriter(object):
    def __init__(self, fileobj):
        self._fileobj = fileobj

    def write(self, b):
        return self._fileobj.write(b)


class Downloader(object):
    def download(self, args):
        session = get_session()
        client = session.create_client('s3')
        file_type = args.file_type
        if args.debug:
            session.set_debug_logger('')
        with TransferManager(client) as manager:
            getattr(self, 'download_' + file_type)(
                manager, args.file_name, args.s3_bucket, args.s3_key)

    def download_filename(self, manager, filename, bucket, s3_key):
        manager.download(bucket, s3_key, filename)

    def download_seekable(self, manager, filename, bucket, s3_key):
        with open(filename, 'wb') as f:
            future = manager.download(bucket, s3_key, f)
            future.result()

    def download_nonseekable(self, manager, filename, bucket, s3_key):
        with open(filename, 'wb') as f:
            future = manager.download(
                bucket, s3_key, NonSeekableWriter(f))
            future.result()


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--file-name', required=True)
    parser.add_argument(
        '--file-type', choices=['filename', 'seekable', 'nonseekable'],
        required=True)
    parser.add_argument('--s3-bucket', required=True)
    parser.add_argument('--s3-key', required=True)
    parser.add_argument('--debug', action='store_true')
    args = parser.parse_args()
    Downloader().download(args)


if __name__ == '__main__':
    main()
