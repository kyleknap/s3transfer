#!/usr/bin/env python
"""
This is a script to help in benchmarking performance of other scripts.

Requirements:
psutil>=4.1.0,<5.0.0
"""
import argparse
import os
import sys
import subprocess
import time

import psutil


if sys.platform.startswith('linux'):
    INTERFACE = 'eth0'
elif sys.platform == 'darwin':
    INTERFACE = 'en0'
else:
    raise RuntimeError('Script cannot be run on %s' % sys.platform)


def benchmark(args):
    parent_pid = os.getpid()
    child_p = run_script(args)
    try:
        run_benchmark(child_p.pid, args.output_file, args.data_interval)
    except KeyboardInterrupt:
        proc = psutil.Process(parent_pid)
        procs = proc.children(recursive=True)

        for child in procs:
            child.terminate()

        gone, alive = psutil.wait_procs(procs, timeout=1)
        for child in alive:
            child.kill()
        sys.exit(0)


def run_script(args):
    script_args = args.script.split(' ')
    return subprocess.Popen(script_args)


def run_benchmark(pid, output_file, data_interval):
    p = psutil.Process(pid)
    previous_net = psutil.net_io_counters(pernic=True)[INTERFACE]
    previous_time = time.time()

    with open(output_file, 'w') as f:
        while p.is_running():
            if p.status() == psutil.STATUS_ZOMBIE:
                p.kill()
                break
            time.sleep(data_interval)

            try:
                memory_used = p.memory_info().rss
                cpu_percent = p.cpu_percent()
                current_net = psutil.net_io_counters(pernic=True)[INTERFACE]
            except psutil.AccessDenied:
                # Trying to get process information from a closed process will
                # result in AccessDenied.
                break

            sent_delta = current_net.bytes_sent - previous_net.bytes_sent
            recv_delta = current_net.bytes_recv - previous_net.bytes_recv
            current_time = time.time()
            dt = current_time - previous_time
            previous_time = current_time
            sent_rate = sent_delta / dt
            recv_rate = recv_delta / dt

            t = time.time()
            f.write(','.join(str(val) for val in [
                t, memory_used, cpu_percent, sent_rate, recv_rate]) + '\n')
            f.flush()
    sys.exit(0)


def main():
    parser = argparse.ArgumentParser(usage=__doc__)
    parser.add_argument(
        'script', help='The script to run for benchmarking')
    parser.add_argument(
        '--data-interval', default=0.1, type=float)
    parser.add_argument(
        '--output-file', default='performance.csv')
    args = parser.parse_args()
    benchmark(args)


if __name__ == '__main__':
    sys.exit(main())
